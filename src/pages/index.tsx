import useBarcodeScanner from "@/hooks/useBarcodeScanner";
import { api } from "@/utils/api";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";

export default function Home() {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const [scanResult, setScanResult] = useState("QR scan result");
  const scanner = useBarcodeScanner(handleScan);

  function handleScan(scanData: typeof scanResult) {
    setScanResult(scanData);
    if (scanner.ready) {
      void scanner.stop();
    }
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta
          name="description"
          content="Generated by create-t3-app"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight  sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <button
            className="rounded-full bg-purple-700 p-4 text-lime-300 outline outline-1 outline-lime-300 transition-[filter] disabled:saturate-0"
            onClick={() => {
              if (scanner.state === "not mounted") return;
              scanner.state === "scanning" ? void scanner.stop() : void scanner.start();
            }}
            disabled={!scanner.ready || scanner.state === "starting"}
          >
            {scanner.state !== "scanning" ? "START SCAN" : "STOP SCAN"}
          </button>
          <div
            id={scanner.id}
            className="aspect-square h-56 overflow-hidden rounded-3xl bg-purple-900 object-cover shadow-[0_0_40px_3px] shadow-purple-300 transition-shadow duration-500"
          />
          <div>{scanResult}</div>
          <div>{scanner.state}</div>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4  hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your database and
                authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4  hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl ">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <div className="text-center text-2xl ">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </div>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold transition hover:bg-white/20"
        onClick={() => void signIn()}
      >
        {sessionData ? "Link new account" : "Sign in"}
      </button>
      {sessionData && (
        <button
          className="rounded-full bg-white/10 px-10 py-3 font-semibold transition hover:bg-white/20"
          onClick={() => void signOut({ redirect: false })}
        >
          Sign out
        </button>
      )}
    </div>
  );
}
